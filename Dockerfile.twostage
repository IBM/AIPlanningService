FROM ubuntu:18.04 as builder

RUN apt-get update && \
    apt-get install -y locales jq vim wget curl gawk \
    cmake g++ g++-multilib make python python-dev python-pip

# Install basic dev tools
RUN pip install --upgrade pip
# RUN pip install h5py keras numpy pillow scipy tensorflow-cpu subprocess32

# Set up environment variables
RUN locale-gen en_US.UTF-8
ENV LANG=en_US.UTF-8 \ 
	CXX=g++ \
	HOME=/app \
	BASE_DIR=/app/planners \
    DELFI_URL=https://bitbucket.org/ipc2018-classical/team23/get/ipc-2018-seq-opt.tar.gz \
    RB_BUILD_COMMIT_ID=821fad1 \
    FI_BUILD_COMMIT_ID=1751d5e \
    DIV_SC_BUILD_COMMIT_ID=0d2c2e4 \
    KSTAR_BUILD_COMMIT_ID=d78ec31




# Create required directories
RUN mkdir -p $HOME && mkdir -p $BASE_DIR
WORKDIR $BASE_DIR

#################################
# Download and Install Delfi IPC2018 version
#################################
RUN curl -SL $DELFI_URL | tar -xz \
	&& mv ipc2018-classical-team23* delfi \
	&& cd delfi \
    && sed -i 's/-Werror//g' src/cmake_modules/FastDownwardMacros.cmake  \
	&& python ./build.py release64 \
    && cd symba \
    && sed -i 's/-Werror//g' src/search/Makefile \
    && ./build 

#################################
# Download and Install Cerberus, post-IPC2018 version
#################################
WORKDIR $BASE_DIR/cerberus/

# Fetch the code at the right commit ID from the Github repo
RUN curl -L https://github.com/ctpelok77/fd-red-black-postipc2018/archive/${RB_BUILD_COMMIT_ID}.tar.gz | tar xz --strip=1 \
# Invoke the build script with appropriate options
    && python ./build.py -j4 \
# Strip the main binary to reduce size
    && strip --strip-all builds/release/bin/downward

#################################
# Download and Install ForbidIterative
#################################

WORKDIR $BASE_DIR/forbiditerative/
# Fetch the code at the right commit ID from the Github repo
RUN curl -L https://github.com/IBM/forbiditerative/archive/${FI_BUILD_COMMIT_ID}.tar.gz | tar xz --strip=1 \
    && python ./build.py -j4 release64 \
# Strip the main binary to reduce size
    && strip --strip-all builds/release64/bin/downward


WORKDIR $BASE_DIR/diversescore/
# Fetch the code at the right commit ID from the Github repo
RUN curl -L https://github.com/IBM/diversescore/archive/${DIV_SC_BUILD_COMMIT_ID}.tar.gz | tar xz --strip=1 \
# Invoke the build script with appropriate options
    && python ./build.py -j4 \
# Strip the main binary to reduce size
    && strip --strip-all builds/release/bin/downward


#################################
# Download and Install K*
#################################
WORKDIR $BASE_DIR/kstar/
# Fetch the code at the right commit ID from the Github repo
RUN curl -L https://github.com/ctpelok77/kstar/archive/${KSTAR_BUILD_COMMIT_ID}.tar.gz | tar xz --strip=1 \
# Invoke the build script with appropriate options
    && python ./build.py -j4 release64 \
# Strip the main binary to reduce size
    && strip --strip-all builds/release64/bin/downward

###############################################################################
## Second stage: the image to run the planners
## 
## This is the image that will be distributed, we will simply copy here
## the files that we fetched and compiled in the previous image and that 
## are strictly necessary to run the planners.
## Also, installing nodejs here.
###############################################################################

FROM ubuntu:18.04

# Install any package needed to *run* the planner
# RUN apt-get update && apt-get install --no-install-recommends -y \
#     python python-setuptools python-pip \
#     && rm -rf /var/lib/apt/lists/*

RUN apt-get update && \
    apt-get install -y locales curl gawk \
    # cmake g++ g++-multilib make \
    python python-dev python-pip \
    && rm -rf /var/lib/apt/lists/*

# Set up environment variables
RUN locale-gen en_US.UTF-8
ENV LANG=en_US.UTF-8 \ 
	CXX=g++ \
	HOME=/app \
	BASE_DIR=/app/planners \
    DIVERSE_FAST_DOWNWARD_PLANNER_PATH=/app/planners/cerberus \
    DIVERSE_SCORE_COMPUTATION_PATH=/app/planners/diversescore

# Create required directories
RUN mkdir -p $HOME && mkdir -p $BASE_DIR
WORKDIR $BASE_DIR


# Install basic dev tools
RUN pip install --upgrade pip
# RUN pip install h5py keras numpy pillow scipy tensorflow-cpu subprocess32
COPY requirements.txt ${BASE_DIR}/
RUN pip install -r requirements.txt

## Copying Delfi planner essential files
WORKDIR ${BASE_DIR}/delfi/
COPY --from=builder ${BASE_DIR}/delfi/dl_model ./dl_model
COPY --from=builder ${BASE_DIR}/delfi/plan-ipc.py ${BASE_DIR}/delfi/fast-downward.py ${BASE_DIR}/delfi/create-image-from-graph.py ${BASE_DIR}/delfi/timers.py ${BASE_DIR}/delfi/symba.py ./
COPY --from=builder ${BASE_DIR}/delfi/builds/release64/bin/ ./builds/release64/bin/
COPY --from=builder ${BASE_DIR}/delfi/driver ./driver
COPY --from=builder ${BASE_DIR}/delfi/symba/src/preprocess/preprocess ./symba/src/preprocess/preprocess
# COPY --from=builder ${BASE_DIR}/delfi/symba/src/search/{downward,downward-1,downward-2,downward-4,dispatch,unitcost} ./symba/src/search/
COPY --from=builder ${BASE_DIR}/delfi/symba/src/search/downward ${BASE_DIR}/delfi/symba/src/search/downward-1 ${BASE_DIR}/delfi/symba/src/search/downward-2 ${BASE_DIR}/delfi/symba/src/search/downward-4 ${BASE_DIR}/delfi/symba/src/search/dispatch ${BASE_DIR}/delfi/symba/src/search/unitcost ./symba/src/search/
COPY --from=builder ${BASE_DIR}/delfi/symba/src/translate ./symba/src/translate
# COPY --from=builder ${BASE_DIR}/delfi/symba/src/{plan,plan-ipc} ./symba/src/
COPY --from=builder ${BASE_DIR}/delfi/symba/src/plan ${BASE_DIR}/delfi/symba/src/plan-ipc ./symba/src/
## Modifying ${BASE_DIR}/delfi/plan-ipc.py to point to a correct location of abstract_structure_module
RUN sed -i 's#src#builds/release64/bin#g' ${BASE_DIR}/delfi/plan-ipc.py
## Copying a run script for Delfi
COPY utils/plan-delfi.sh ${BASE_DIR}/delfi/
# RUN echo 'alias delfi="python ${BASE_DIR}/delfi/plan-ipc.py --image-from-lifted-task"' >> ~/.bashrc


## Copying Cerberus planner essential files
WORKDIR ${BASE_DIR}/cerberus/
COPY --from=builder ${BASE_DIR}/cerberus/fast-downward.py ${BASE_DIR}/cerberus/plan-sat.py ${BASE_DIR}/cerberus/plan-agl.py ./
COPY --from=builder ${BASE_DIR}/cerberus/builds/release/bin/ ./builds/release/bin/
COPY --from=builder ${BASE_DIR}/cerberus/driver ./driver
## Copying run scripts for Cerberus
COPY utils/plan-cerberus-sat.sh $BASE_DIR/cerberus/plan-sat.sh
COPY utils/plan-cerberus-agl.sh $BASE_DIR/cerberus/plan-agl.sh

# RUN echo 'alias cerberus-sat="python ${BASE_DIR}/cerberus/plan-sat.py"' >> ~/.bashrc
# RUN echo 'alias cerberus-agl="python ${BASE_DIR}/cerberus/plan-agl.py"' >> ~/.bashrc


## Copying ForbidIterative planner essential files
WORKDIR ${BASE_DIR}/diversescore/
COPY --from=builder ${BASE_DIR}/diversescore/fast-downward.py .
COPY --from=builder ${BASE_DIR}/diversescore/builds/release/bin/ ./builds/release/bin/
COPY --from=builder ${BASE_DIR}/diversescore/driver ./driver
WORKDIR ${BASE_DIR}/forbiditerative/
COPY --from=builder ${BASE_DIR}/forbiditerative/fast-downward.py ${BASE_DIR}/forbiditerative/copy_plans.py ${BASE_DIR}/forbiditerative/plan.py ${BASE_DIR}/forbiditerative/planner_call.py ${BASE_DIR}/forbiditerative/timers.py ./
COPY --from=builder ${BASE_DIR}/forbiditerative/builds/release64/bin/ ./builds/release64/bin/
COPY --from=builder ${BASE_DIR}/forbiditerative/driver ./driver
COPY --from=builder ${BASE_DIR}/forbiditerative/iterative ./iterative
# COPY --from=builder ${BASE_DIR}/forbiditerative/plan_topk.sh .
# COPY --from=builder ${BASE_DIR}/forbiditerative/plan_unordered_topq.sh .
# COPY --from=builder ${BASE_DIR}/forbiditerative/plan_diverse_agl.sh .
# COPY --from=builder ${BASE_DIR}/forbiditerative/plan_diverse_sat.sh .
COPY utils/plan_diverse_sat.sh .



## Copying K* planner essential files
WORKDIR ${BASE_DIR}/kstar/
COPY --from=builder ${BASE_DIR}/kstar/fast-downward.py ${BASE_DIR}/kstar/plan_topk.sh ${BASE_DIR}/kstar/plan_topq.sh ${BASE_DIR}/kstar/plan_unordered_topq.sh ./
COPY --from=builder ${BASE_DIR}/kstar/builds/release64/bin/ ./builds/release64/bin/
COPY --from=builder ${BASE_DIR}/kstar/driver ./driver
# RUN echo 'alias kstar="python ${BASE_DIR}/kstar/fast-downward.py --build release64"' >> ~/.bashrc

## For all planners
# RUN echo "file has changed"
COPY utils/plans_to_json.py $BASE_DIR/

#################################
# Setup NodeJS and application dependencies
#################################
RUN curl -sL https://deb.nodesource.com/setup_12.x | bash && apt-get install -y nodejs build-essential

COPY package.json  $HOME/

WORKDIR $HOME
RUN npm install
ENV BLUEBIRD_DEBUG=1
ENV DEBUG=*
EXPOSE 4501

#################################
# Copy NodeJS service
#################################
RUN mkdir $HOME/samples
COPY samples/domain1.pddl samples/problem1.pddl $HOME/samples/
COPY config $HOME/config
COPY storage $HOME/storage
COPY apibase.masterppp.json conf.js app.masterppp.common.js app.masterppp.joint.js $HOME/

CMD ["npm", "start"]
